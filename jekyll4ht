#!/usr/bin/env texlua
kpse.set_program_name("luatex")


local make4ht  = require("make4ht-lib")
local lapp     = require("lapp-mk4")
local mkutils  = require("mkutils")
local mkparams = require("mkparams")
local config   = require("jekyll-config")
local filter = require("make4ht-filter")
local removeaccents = require("jekyll-removeaccents")

-- configuration handling
-- config file is Lua file, it can be placed in current directory or its parents (at any level), or
-- in $HOME or $XDG_CONFIG_HOME/jekyll4ht
-- config file should be named .jekyll4ht
--
local configname = ".jekyll4ht"
local conffile = config.find_config(configname) or config.find_xdg_config(configname)
local configuration = {}

-- posts and css directories can be configured relative to the base dir, this function shoult handle it
local function normalize_names(base, name)
  -- if name starts with "./" then it will be handled as relative to the base dir
  if name:match("^%./") then
    local n = base .. name 
    -- remove ./ and replace double slashes
    return n:gsub("%./","/"):gsub("//","/")
  end
  -- if it isn't relative, return just name
  return name
end

-- default configuration. use environment variables
configuration.base = os.getenv("JEKYLL4HT_BASE")
configuration.posts = os.getenv("JEKYLL4HT_POSTS") or "./_posts"
configuration.css  = os.getenv("JEKYLL4HT_CSS") or "./css"
configuration.img  = os.getenv("JEKYLL4HT_IMG") or "./img"
configuration.nametpl = os.getenv("JEKYLL4HT_NAMETPL") or "${date}-${slug}.html"
configuration.publish_mode = "publish"
configuration.image_extensions = {"jpg","png","svg","gif"}
configuration.excerpt_count = 2
configuration.excerpt_pattern = '([%a%s%<%>%/]+</p>)'
configuration.excerpt_separator = "\n<!--more-->\n"
configuration.build_file = nil   -- don't use default build file

if conffile then
  -- configuration table is used as environment for the config file
  -- each global variable used in the config file is saved in the configuration table
  configuration = config.load_config(conffile, configuration)
else
  print "jekyll4ht warning: no config file found"
end

----------------------
-- use configuration -
-- -------------------
-- files are published to site only in the publish mode
local publish = configuration.publish_mode

-- make hash table from array with image extensions
local image_extensions = {}
configuration.image_extensions = configuration.image_extensions or {}
for _, ext in ipairs(configuration.image_extensions) do
  image_extensions[ext] = true
end

local function trim_string(x)
  return x:gsub("^%s*",""):gsub("%s*$","")
end
-- YAML header parse filter
-- we want to parse some basic fields from the YAML header
--
-- 
local function parseYAML(filename, fields)
  local fields = fields or {}
  -- open HTML file
  local f = io.open(filename,"r")
  local contents = f:read("*all")
  f:close()
  -- find the YAML header
  local header = contents:match("%-%-%-(.-)%-%-%-") -- it probably isn't a good idea to use --- in title
  if not header then 
    print "jekyll4ht error: cannot find an YAML header in the HTML file"
    return nil
  end
  local t = {}
  for _, key in ipairs(fields) do
    t[key] = trim_string(header:match(key.. "%s*:%s*([^\n]+)"))
    -- print(key, t[key])
  end
  -- return also contents, they will be saved to the destination file
  return t, contents
end

-- convert title to usable string: remove special characters, replace spaces with `-`
local function to_slug(s)
  local s = removeaccents.strip_accents(s)
  return trim_string(s):gsub("[^%w%s-_]", ""):gsub("%s", "-"):lower()
end

-- add image dir to all img tags
local function imgparser(doc)
  -- we need the whole contents of img element until src attribute, quote character and first character of the link
  return doc:gsub('(<img[^%>]-src=[%s]*)(.)([^%>]+)', function(img, quote, rest)
    if rest:match("https?:") then 
      return img..quote..rest
    end
    local newlink = "/" .. configuration.img .. "/" .. rest
    -- normalize slashes
    newlink = newlink:gsub("^[%/%.]*", "/"):gsub("//", "/")
    return img..quote..newlink
  end)
end
--
-- mark excerpt
local function excerpt(doc)
  print("Insert excerpt")
  local count= 0
  local excerpt_separator = configuration.excerpt_separator
  -- cancel inserting the separator if it is nil or false
  if not excerpt_separator then return doc end
  local excerpt_pattern = configuration.excerpt_pattern 
  local excerpt_repeat = configuration.excerpt_count or 1
  print("Excerpt repeat", excerpt_repeat)
  return doc:gsub(excerpt_pattern, function(a)
    count = count + 1
    if count == excerpt_repeat then
      print("Inserting excerpt: ", a)
      return a .. excerpt_separator 
    end
    return a
  end)
end

local function make_name(filename, par)
  -- save generated filename first time the post is published, it will be reused later
  local nametpl = configuration.nametpl
  local published = par.input .. ".published" 
  local newname
  if mkutils.file_exists(published) then
    local f = io.open(published, "r")
    newname = f:read("*line")
    print("Read published filename", newname)
    f:close()
  else
    -- parse date and title from yaml header
    local fields, contents = parseYAML(filename, {"date", "title"})
    local date = os.date("%Y-%m-%d")
    -- default new file name. it will be replaced if yaml properties were parsed
    newname = date .. "-" .. filename
    if fields then
      -- sanitize the title
      fields.slug = to_slug(fields.title or "")
      fields.name = par.input
      -- fill name template with fields
      newname = nametpl % fields
    end
    local f = io.open(published, "w")
    f:write(newname)
    f:close()
  end
  return newname
end
-- for k,v in pairs(configuration) do
--   if type(v) == "string" then
--     print(k,v)
--   end
-- end

-- args string is here just as sample, we dont pass it it to 
-- mkparams.get_args() so default args string is used

local options = {progname = "jekyll4ht"}
local args = mkparams.get_args(options)

local parameters = mkparams.process_args(args) 


-- add to tex4ht_sty_par: imgdir:adresar so obrazky,mod
-- Make:htlatex {packages = '\\RequirePackage{jekyll}'}
-- css soubory kopírovat taky do samostatnýho adresáře, jméno bude ve frontmatter, je věcí 
-- usera dát cestu k css souboru do šablony
local mode = parameters.mode
local build_file = parameters.build_file 
if not mkutils.file_exists(build_file) then
  -- if build file doesn\t exist, then use default build file, if it is configured
  build_file = configuration.build_file or build_file
end

local make = mkutils.load_config(parameters, build_file)["Make"]

-- publish mode is special. YAML header is created and files are copied to 
-- the output destination

if mode==publish then
  parameters.packages = parameters.packages .. '\\RequirePackage{jekyll}' 
end
 
make.params = parameters
for k, v in pairs(parameters) do
  print("par",k,v)
end


if make:length() < 1 then
  if mode == "draft" then
    make:htlatex()
  else
    make:htlatex()
    make:htlatex()
    make:htlatex()
  end
end


if not args["no-tex4ht"] then
  make:tex4ht()
end

local ext = args.xetex and "xdv" or "dvi"
if #make.image_patterns > 0 then
  make.params.t4ht_par = make.params.t4ht_par .. " -p"
end
make:t4ht {ext = ext}

-- handling of publish mode
if mode==publish then
  local base = configuration.base
  local posts = configuration.posts
  local css = configuration.css
  local img = configuration.img
  if not base then
    print "jekyll4ht error: base dir configuration not set"
    os.exit(1)
  end
  -- fix issues in the HTML file
  -- add correct dir to the img src attribute
  local htmlprocess = filter{ imgparser, excerpt }
  make:match("html$", htmlprocess)
  make:match("html$", function(filename, par)
    local newname = make_name(filename, par)
    local htmldir = normalize_names(base, posts) .. "/"
    local htmlfile =htmldir .. newname
    print("Save the html file",htmlfile)
    mkutils.cp(filename, htmlfile)
    -- local f = io.open(htmlfile, "w")
    -- f:write(contents)
    -- f:close()
    return false
  end)
  make:match("css$", function(filename, par)
    local cssdir = normalize_names(base, css) .. "/"
    local cssfile = cssdir  .. filename
    mkutils.copy(filename, cssfile)
    return false
  end)
  make:match("tmp$", function() return false,"tmp file" end)
  make:match(".*", function(filename, par)
    local ext = filename:match("%.([^%.]-)$")
    if image_extensions[ext] then
      print("extenson", ext)
      local imgdir = normalize_names(base, img) .. "/"
      local imgfile = imgdir .. filename
      mkutils.copy(filename, imgfile)
      return false
    end
  end)
  make:match(".*",function(filename,par)
    -- local outdir =  '' --par["outdir"] and par["outdir"] .."/" or ''
    -- if par['outdir'] ~= "" then outdir = par['outdir'] .. '/' end
    local outdir = configuration.base ..  "/"
    print("outdir: "..outdir)
    local outfilename = outdir .. filename
    mkutils.copy(filename,outfilename)
    return true
  end)
end
make:run()
